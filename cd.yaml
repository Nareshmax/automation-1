name: "Terraform Routing NG Infrastructure"

on:
  pull_request:
    branches:
      - pre-prod-*
      - prod-*
  push:
    branches:
      - pre-prod-*
      - prod-*

permissions:
  id-token: write
  contents: read

jobs:
  Calculate-Matrix:
    name: "Calculate Matrix"
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - id: set-matrix
        run: |
          # Extract the branch name from the GitHub ref
          branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
          
          # Declare associative arrays for pre-prod and prod accounts
          declare -A pre_prod_accounts=(
            ["dev"]="300813158921:ic-dev"
            ["test"]="265671366761:ic-test"
            ["stage"]="545209810301:ic-stage"
            ["pfor"]="150598861634:ic-pfor"
          )
          
          declare -A prod_accounts=(
            ["ausov1"]="637423616941:ic-ausov1"
            ["eusov1"]="533267422300:ic-eusov1"
            ["uksov1"]="147997157422:ic-uksov1"
            ["absov1"]="123456789321:ic-absov1"
            ["default"]="737494165703:ic-prod"
          )
          
          # Function to set the matrix output
          set_matrix_output() {
            local account=$1
            local account_name=$2
            local account_type=$3
            local environment=$4
            local region=$5
          
            matrix_combination='
              {"account": "'$account'", "account_name": "'$account_name'", "account_type": "'$account_type'", "environment": "'$environment'", "region": "'$region'"}
            '
            echo ::set-output name=matrix::{\"include\":[$matrix_combination]}
          }
          
          # Function to handle pre-prod branches
          handle_pre_prod() {
            local environment=$1
            account_info=${pre_prod_accounts[$environment]}
            if [ -z "$account_info" ]; then
              echo "Invalid environment name. Skipping."
              exit 1
            fi
            # Split account_info into account and account_name using ':' as the delimiter
            IFS=':' read -r account account_name <<< "$account_info"
            set_matrix_output "$account" "$account_name" "pre-prod" "$environment" "us-west-2"
          }
          
          # Function to handle prod branches
          handle_prod() {
            local region=$1
            local account_prefix=$2
            if [[ -n "$account_prefix" ]]; then
              account_info=${prod_accounts["$account_prefix"]}
            else
              account_info=${prod_accounts["default"]}
            fi
            # Split account_info into account and account_name using ':' as the delimiter
            IFS=':' read -r account account_name <<< "$account_info"
            set_matrix_output "$account" "$account_name" "prod" "" "$region"
          }
          
          # Check if the branch is a pre-prod branch
          if [[ $branchName =~ ^pre-prod-(.*)$ ]]; then
          
            # Examples:
            # branchName = "pre-prod-dev"
            # BASH_REMATCH[0] = "pre-prod-dev"
            # BASH_REMATCH[1] = "dev"
          
            handle_pre_prod "${BASH_REMATCH[1]}"
          # Check if the branch is a prod branch with a known account prefix
          elif [[ $branchName =~ ^prod-((((ausov1|eusov1|uksov1|absov1)-(.+)$ ]]; then
          
            # Example: branchName = "prod-ausov1-ap-southeast-2"
            # BASH_REMATCH[0] = "prod-ausov1-ap-southeast-2"
            # BASH_REMATCH[1] = "ausov1"
            # BASH_REMATCH[2] = "ap-southeast-2"
          
            account_prefix="${BASH_REMATCH[1]}"
            region="${BASH_REMATCH[2]}"
            handle_prod "$region" "$account_prefix"
          # Handle prod branches without a specific account prefix
          elif [[ $branchName =~ ^prod-(.+)$ ]]; then
          
            # Example: branchName = "prod-us-west-2"
            # BASH_REMATCH[0] = "prod-us-west-2"
            # BASH_REMATCH[1] = "us-west-2"
          
            region="${BASH_REMATCH[1]}"
            handle_prod "$region"
          fi
  Terraform-CD:
    name: "Terraform CD"
    runs-on: ubuntu-latest
    if: needs.Calculate-Matrix.outputs.matrix != '' && needs.Calculate-Matrix.outputs.matrix != '[]'
    strategy:
      matrix: ${{fromJson(needs.Calculate-Matrix.outputs.matrix)}}
    environment:
      name: ${{matrix.account}}-${{matrix.region}}
    needs: Calculate-Matrix
    steps:
      - uses: actions/checkout@v2
      - name: "Environment"
        run: echo "account is ${{matrix.account}}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{matrix.account}}:role/ServiceAccess-routing-routing-ng-infrastructure
          aws-region: ${{ matrix.region }}
          mask-aws-account-id: 'no'

      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v2

      # Set the working directory based on branch type
      - name: Set working directory
        run: |
          echo "working_directory=iac/terraform/environments/${{ matrix.account_name }}/${{ matrix.region }}" >> $GITHUB_ENV

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: terraform init -input=false -reconfigure
        working-directory: ${{ env.working_directory }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.working_directory }}

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      # - name: remove from terraform state file
      #   run: terraform state rm module.rds-eu-central-1.aws_rds_cluster.routing-ng-afm-serverless
      #   working-directory: ${{ env.working_directory }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -lock=false
        working-directory: ${{ env.working_directory }}
        env:
          # reading secret manager values form secrets
          TF_VAR_access-key-id: ${{ secrets.ACCESS_AGENT_SELECTOR_T0_SECUREUSER_PRIVATE_KEY }}
          TF_VAR_access-key-secret: ${{ secrets.ACCESS_AGENT_SELECTOR_T0_SECUREUSER_PRIVATE_SECRET }}
          TF_VAR_git-cidr: '${{ steps.ip.outputs.ipv4 }}/32'

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Save stream ARN
        id: check_stream
        working-directory: ${{ env.working_directory }}
        run: |
          streamArn=""
          streamName="routing-vfm-requests"
          streamSummary=$(aws kinesis describe-stream-summary --stream-name $streamName 2>/dev/null || echo '{"StreamDescriptionSummary": {}}')
          streamExists=$(echo $streamSummary | jq '.StreamDescriptionSummary.StreamARN' 2>/dev/null || echo 'null')

          if [ "$streamExists" != "null" ]; then
            streamArn=$(echo $streamSummary | jq -r '.StreamDescriptionSummary.StreamARN')
            echo "stream_arn=$streamArn" >> $GITHUB_OUTPUT
          else
            echo "Stream not found. Setting stream_arn to an empty string."
            echo "stream_arn=" >> $GITHUB_OUTPUT
          fi
          echo "::set-output name=stream_arn::$streamArn"

      - name: Import
        if: steps.check_stream.outputs.stream_arn != ''
        working-directory: ${{ env.working_directory }}
        run: |
          echo ${{ steps.check_stream.outputs.stream_arn }}
        # terraform state rm module.kinesis-us-west-2.aws_kinesis_stream.routing-vfm-requests
        # terraform import module.kinesis-us-west-2.aws_kinesis_stream.routing-vfm-requests routing-vfm-requests

      # Auto-approve prevents the requirement of human interaction
      - name: "Run - Terraform Apply"
        run: terraform apply -input=false -auto-approve -lock=false
        working-directory: ${{ env.working_directory }}
        env:
          # reading secret manager values form secrets
          TF_VAR_access-key-id: ${{ secrets.ACCESS_AGENT_SELECTOR_T0_SECUREUSER_PRIVATE_KEY }}
          TF_VAR_access-key-secret: ${{ secrets.ACCESS_AGENT_SELECTOR_T0_SECUREUSER_PRIVATE_SECRET }}
          TF_VAR_git-cidr: '${{ steps.ip.outputs.ipv4 }}/32'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{matrix.account}}:role/ServiceAccess-routing-routing-ng-infrastructure
          aws-region: ${{matrix.region}}


      - name: Set up PostgreSQL environment variables and Run SQL script-findmatch

        run: |
          CLUSTER_IDENTIFIER='arn:aws:rds:${{ matrix.region }}:${{matrix.account}}:cluster:routing-ng-afm-iam-cluster'
          ENDPOINT=$(aws rds describe-db-clusters --db-cluster-identifier $CLUSTER_IDENTIFIER --query 'DBClusters[0].Endpoint' --output text) >> $GITHUB_ENV
          SECRET_ARN=$(aws rds describe-db-clusters --db-cluster-identifier $CLUSTER_IDENTIFIER --query 'DBClusters[0].MasterUserSecret.SecretArn' --output text)
          export PGUSER=postgres
          export PGPASSWORD=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN --query SecretString | jq -r '. | fromjson | .password')
          psql -h $ENDPOINT -f 'iac/SQLscript/dbRoleCreateUpdate.sql' -w
